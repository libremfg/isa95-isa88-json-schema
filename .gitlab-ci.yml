stages:
  - lint
  - containerize
  - deploy

lint:
  stage: lint
  image: golang:latest
  script:
    - go install github.com/giantswarm/schemalint/v2@latest
    - |
      for i in ./Schema/*.json;
        do echo "checking $i";
        schemalint verify $i;
      done

containerize-localhost:
  stage: containerize
  image: docker:latest
  needs:
    - lint
  variables:
    HOST: "http://localhost/"
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY/libremfg/b2mml-batchml:$CI_COMMIT_SHORT_SHA . --build-arg HOST=$HOST
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY/libremfg/b2mml-batchml:$CI_COMMIT_SHORT_SHA
    # :latest tag
    - docker tag $CI_REGISTRY/libremfg/b2mml-batchml:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/libremfg/b2mml-batchml:latest
    - docker push $CI_REGISTRY/libremfg/b2mml-batchml:latest
    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY/libremfg/b2mml-batchml:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/libremfg/b2mml-batchml:$CI_COMMIT_TAG
        docker push $CI_REGISTRY/libremfg/b2mml-batchml:$CI_COMMIT_TAG
      fi

containerize-jsonlibremfgai:
  stage: containerize
  image: docker:latest
  needs:
    - lint
  variables:
    HOST: "https://json.libremfg.ai/"
    ENV_SLUG: "jsonlibremfgai"
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-$CI_COMMIT_SHORT_SHA . --build-arg HOST=$HOST
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-$CI_COMMIT_SHORT_SHA $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-latest
    - docker push $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-latest
    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-$CI_COMMIT_SHORT_SHA $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-$CI_COMMIT_TAG
        docker push $CI_REGISTRY/libremfg/b2mml-batchml:$ENV_SLUG-$CI_COMMIT_TAG
      fi

deploy-jsonliremfgai:
  stage: deploy
  image: dtzar/helm-kubectl
  only:
    - tags
  needs:
    - containerize-jsonlibremfgai
  environment:
    name: production
    url: https://json.libremfg.ai
  variables:
    ENV_SLUG: jsonlibremfgai
    KUBE_CONTEXT: libremfg/b2mml-batchml:na1
    KUBE_NAMESPACE: json-schema
    INGRESS_HOST: json.libremfg.ai
  script:
    # - kubectl config get-contexts
    - kubectl config use-context $KUBE_CONTEXT
    - |
      if [ -z "$CI_COMMIT_TAG" ]; then
        export TAG=$ENV_SLUG-latest;
        echo "using tag $TAG";
      else 
        export TAG=$ENV_SLUG-$CI_COMMIT_TAG;
        echo "using tag $TAG";
      fi
    - >
      helm upgrade --install b2mml-batchml ./chart \
        --set image.tag=$TAG \
        --set imagePullSecrets[0].name=libremfg-b2mml-batchml-container-registry \
        --set ingress.enabled=true \
        --set ingress.className=traefik \
        --set ingress.hosts[0].host=$INGRESS_HOST \
        --set ingress.hosts[0].paths[0].path=/ \
        --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
        --set ingress.tls[0].hosts[0]=$INGRESS_HOST \
        --set ingress.tls[0].secretName=$INGRESS_HOST-tls \
        --namespace $KUBE_NAMESPACE
